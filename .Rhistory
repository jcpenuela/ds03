0.1
0.1 + 0.2
F
f
T
t
1i
mode(1)
typeof(1)
typeof(1L)
typeof(1F)
typeof(1D)
typeof(1.0)
list(1,2)
list(1)
list(c(1,2), "a")
list(c(1,2), list("a")
)
list(c(1,2), list("a",1))
c(c(1,2), c(2,3))
list(c(1,2), c(2,3))
?apply
x <- cbind(x1 = 3, x2 = c(4:1, 2:5))
x
4:1
x <- cbind(x1 = c(3,4), x2 = c(4:1, 2:5))
x
typeof(x)
x[1,2]
x[2,3]
x[2,1]
x[2,2]
x[2]
x[3]
x[4]
x[9]
x[11]
x[1,]
x[,1]
x[,2]
is.matrix(x)
is.matrix(x$x2)
x$x2
x[1]$x2
x[1,]$x2
summary(x)
library(RODBC)
install.packages("RODBC")
library(RODBC)
canal <- odbcConnect("TempOraculo", uid = "sa", pwd = "eTGTGq43")
canal <- odbcConnect("Oraculo", uid = "sa", pwd = "eTGTGq43")
canal <- odbcConnect(dsn = "TempOraculo", uid = "sa", pwd = "eTGTGq43")
canal <- odbcConnect(connection="Driver={SQL Server
Native Client 11.0};server=GIRA45;database=TPCH;
trusted_connection=yes;")
canal <- odbcConnect(connection="Driver={SQL Server
Native Client 10.0};server=GIRA45;database=TempOraculo;
trusted_connection=yes;")
canal <- odbcDriverConnect(connection="Driver={SQL Server
Native Client 10.0};server=GIRA45;database=TempOraculo;
trusted_connection=yes;")
canal <- odbcConnect(dsn = "TempOraculo", uid = "sa", pwd = "eTGTGq43")
canal <- odbcConnect(dsn = "TempOraculo_64", uid = "sa", pwd = "eTGTGq43")
p <- sqlQuery(query = "SELECT * FROM TMP_MSTRDM_KPIS_FacturacionPrevista")
p <- sqlQuery(channel = canal, query = "SELECT * FROM TMP_MSTRDM_KPIS_FacturacionPrevista")
sumary(p)
summary(p)
View(p)
kings <- scan("http://robjhyndman.com/tsdldata/misc/kings.dat",skip=3)
kings
kingstimeseries <- ts(kings)
kingstimeseries
births <- scan("http://robjhyndman.com/tsdldata/data/nybirths.dat")
birthstimeseries <- ts(births, start = c(1946,1), frequency = 12)
birthstimeseries
souvenir <- scan("http://robjhyndman.com/tsdldata/data/fancy.dat")
souvenirtimeseries <- ts(souvenir, start = c(1987, 1))
souvenirtimeseries <- ts(souvenir, start = c(1987, 1), frequency = 12)
souvenirtimeseries
plot.ts(kingstimeseries)
plot.ts(kings)
plot.ts(births)
plot.ts(birthstimeseries)
plot.ts(souvenirtimeseries)
souvenirtimeseries
log(souvenirtimeseries)
logsouvenirtimeseries <- log(souvenirtimeseries)
plot.td(logsouvenirtimeseries)
plot.ts(logsouvenirtimeseries)
plot.ts(souvenirtimeseries)
plot.ts(souvenirtimeseries)
plot.ts(logsouvenirtimeseries)
plot.ts(souvenirtimeseries)
plot.ts(logsouvenirtimeseries)
plot.ts(souvenirtimeseries)
plot.ts(logsouvenirtimeseries)
install.packages("TTR")
library(TTR)
plot.ts(kingstimeseries)
library(TTR)
kingstimeseriesSMA3 <- SMA(kingstimeseries, n=3)
plot.ts(kingstimeseriesSMA3)
plot.ts(kingstimeseries)
plot.ts(kingstimeseriesSMA3)
plot.ts(kingstimeseries)
plot.ts(kingstimeseriesSMA3)
plot.ts(kingstimeseries)
plot.ts(kingstimeseriesSMA3)
plot.ts(kingstimeseries)
plot.ts(kingstimeseriesSMA3)
plot.ts(kingstimeseries)
plot.ts(kingstimeseriesSMA3)
kingstimeseriesSMA8 <- SMA(kingstimeseries, n=8)
plot.ts(kingstimeseriesSMA8)
plot.ts(kingstimeseriesSMA3)
plot.ts(kingstimeseriesSMA8)
plot.ts(kingstimeseriesSMA3)
plot.ts(kingstimeseriesSMA8)
plot.ts(birthstimeseries)
birthstimeseriescomponents <- decompose(birthstimeseries)
birthstimeseriescomponents
plot(birthstimeseriescomponents)
birthstimeseriesseasonallyadjusted <- birthstimeseries - birthstimeseriescomponents$seasonal
plt.ts(birthstimeseriesseasonallyadjusted)
plot.ts(birthstimeseriesseasonallyadjusted)
plot.ts(birthstimeseries)
plot.ts(birthstimeseriesseasonallyadjusted)
rain <- scan("http://robjhyndman.com/tsdldata/hurst/precip1.dat",skip=1)
rainseries <- ts(rain,start=c(1813))
plot.ts(rainseries)
mean(rain)
summary(rainseries)
rainseriesforecast <- HoltWinters(rainseries, beta=FALSE, gamma = FALSE)
rainseriesforecast
rainseriesforecast$fitted
plot.ts(rainseries)
rainseriesforecast
rainseriesforecast$fitted
plot(rainseriesforecast)
rainseriesforecast$SSE
rainseriesforecast$x
HoltWinters(rainseries, beta=FALSE, gamma=FALSE, l.start=23.56)
rainseriesforecast
install.packages("forecast")
library(forecast)
rainseriesforecast2 <- forecast.HoltWinters(rainseriesforecast, h=8)
rainseriesforecast2
plot.forecast(rainseriesforecast2)
rainseriesforecast2$residuals
rainseriesforecast2
plot.forecast(rainseriesforecast2)
library(forecast)
plot.forecast(rainseriesforecast2)
rainseriesforecast2$residuals
acf(rainseriesforecast2$residuals, lag.max=20)
acf(rainseriesforecast2$residuals)
acf(rainseriesforecast2$residuals, lag.max=20)
acf(rainseriesforecast2$residuals, lag.max=30)
acf(rainseriesforecast2$residuals, lag.max=90)
acf(rainseriesforecast2$residuals, lag.max=20)
Box.test(rainseriesforecasts2$residuals, lag=20, type="Ljung-Box")
Box.test(rainseriesforecast2$residuals, lag=20, type="Ljung-Box")
plot.ts(rainseriesforecast2$residuals)
plotForecastErrors <- function(forecasterrors)
{
# make a histogram of the forecast errors:
mybinsize <- IQR(forecasterrors)/4
mysd   <- sd(forecasterrors)
mymin  <- min(forecasterrors) - mysd*5
mymax  <- max(forecasterrors) + mysd*3
# generate normally distributed data with mean 0 and standard deviation mysd
mynorm <- rnorm(10000, mean=0, sd=mysd)
mymin2 <- min(mynorm)
mymax2 <- max(mynorm)
if (mymin2 < mymin) { mymin <- mymin2 }
if (mymax2 > mymax) { mymax <- mymax2 }
# make a red histogram of the forecast errors, with the normally distributed data overlaid:
mybins <- seq(mymin, mymax, mybinsize)
hist(forecasterrors, col="red", freq=FALSE, breaks=mybins)
# freq=FALSE ensures the area under the histogram = 1
# generate normally distributed data with mean 0 and standard deviation mysd
myhist <- hist(mynorm, plot=FALSE, breaks=mybins)
# plot the normal curve as a blue line on top of the histogram of forecast errors:
points(myhist$mids, myhist$density, type="l", col="blue", lwd=2)
}
plotForecastErrors(rainseriesforecasts2$residuals)
plotForecastErrors(rainseriesforecast2$residuals)
skirts <- scan("http://robjhyndman.com/tsdldata/roberts/skirts.dat",skip=5)
skirtsseries <- ts(skirts, start = c(1866))
plot.ts(skirtsseries)
swirl()
library(swirl)
swirl()
remove(list = ls())
set.seed(13435)
X <- data.frame("var1" = sample(1:5)), "var2" = sample(6:10), "var3" = sample(11:15))
X <- data.frame("var1" = sample(1:5), "var2" = sample(6:10), "var3" = sample(11:15))
X
sample(1:4)
sample(1:4)
sample(1:4)
sample(1:4)
X[sample(1:5),]
X[sample(1:5),]
X[sample(1:5),]
X <- X[sample(1:5),]
X[X$var2,c(1,3)]
X[c(1,3), x$var2]
X$var2
X$var2[c(1,3)] <- NA
X
X[1]
X[,1]
typeof(X[1])
typeof(X[,1])
typeof(X)
V <- data.frame("var1" = sample(1:5), "var2" = sample(6:10), "var3" = sample(11:15))
typeof(V)
X
X[1]
X[1,3]
X[,3]
X[3]
X[,3]
X[3]
X$var3
X[1:2,3]
X[2:3]
X[2:3, 2]
X[2:3, 5]
X[2:3, 4]
typeof(X[2:3])
typeof(X[2:3][2])
X[2:3][2]
X
X[1]
X[1][2]
X[1][,2]
X[(X$var1 == 4))
X[(X$var1 == 4)]
X[(X$var1 == 4),]
X$var1 == 4
X[1]
X[(X$var1 == 4),]
getwd()
set.seed(13435)
X <- data.frame("var1" = sample(1:5), "var2" = sample(6:10), "var3" = sample(11:15))
S
remove(list = ls())
set.seed(13435)
X <- data.frame("var1" = sample(1:5), "var2" = sample(6:10), "var3" = sample(11:15))
X
X <- X[sample(1:5)]
X <- X[sample(1:5),]
X
X$var2[c(1,3)] = NA
X
X[,1]
X[,"var1"]
X[1:2, "var2"]
X[1:2, 2]
X[1:2, 2:3]
X[3:4, 2:3]
X[which(X$var2>8),]
X[which(X$var2>7),]
X[1]
X[1][2]
X[1][[2]]
typeof(X[1])
X[2]
X2 <- X[2]
X2
X2[2]
X2[[1]]
X2[[1]][2]
X[2]
X[2][[1]]
which(X$var2>8)
mylist <- list(letters = letters("a":"C") )
mylist <- list(letters = letters["a":"c"] )
letters[1:4]
letters[a:c]
letters["a":"c"]
mylist <- list(letters = letters[1:5], numbers = 1:3, matrix = matrix(1:25, ncols=5) )
mylist <- list(letters = letters[1:5], numbers = 1:3, matrix = matrix(1:25, ncol=5) )
mylist
mylist[1]
mylist[2]
mylist[3]
mylist[[3]]
mylist[[1]]
type(mylist[3])
typeof(mylist[3])
typeof(mylist[[3]])
typeof(mylist[[1]])
typeof(mylist[[1]][2])
mylist[[1]][2]
mylist[1][2]
mylist[1]
mylist[1]$letters
mylist[1]$letters[2]
paste("2","3")
paste("2","3", sep="")
swirl()
library(swirl)
d1 <- date()
d1
typeof(d1)
remove(list = ls())
d1 <- date()
typeof(d1)
d2 <- Sys.Date()
typeof(d2)
class(d2)
d2
names(d2)
attributes(d2)
format(d1, "%b %d")
format(d2, "%b %d")
as.Date("1Sep2016","%d%bY")
as.Date("1sep2016","%d%bY")
as.Date(c("1sep2016"),"%d%bY")
as.Date(c("1sep2016"),"%d%b%Y")
as.Date("1sep2016","%d%b%Y")
install.packages("lubridate")
ymd("20160119")
library(lubridate)
ymd("20160119")
ymd_hms("20160119 105605")
ymd_hms("20160119105605")
Sys.timezone()
ymd_hms("20160119105605", tz = "Asia/Pacific")
ymd_hms("20160119105605", tz = "Pacific")
ymd_hms("20160119105605", tz = "Pacific/Auckland")
Sys.timezone()
Sys.timezone(location = "Korea")
Sys.timezone(location = "Berlin")
?Sys.timezone
x <- matrix(rnorm(30, 1), ncol = 5)
remove(list = ls())
x <- matrix(rnorm(30, 1), ncol = 5)
x
y <- c(1, seq(5))
y
z <- cbind(x,y)
z
class(z)
x.df <- data.frame(z)
x.df
x.df$y > 2
x$n <- x.df$y > 2
x.df$n <- x.df$y >2
x
x.df
x.df$n <- ifelse(x.df$y >2,yes = 'G', no = 'L')
x.df
x.df$n[3:4]
x.df$n[3:4] <- "F"
x.df
x.df$n[c(3,5)] <- NA
x.df
x.df$n <- ifelse(x.df$y >2,yes = 'G', no = 'L')
x.df
x.df$n <- x.df$y
x.df$n[c(3,5)] <- NA
x.df
x.df$m <- ifelse(x.df$n >2,yes = 'G', no = 'L')
x.df
remove(list = ls())
set.seed(1) # simulating some data
df <- data.frame(group=rep(c("A", "B", "C"), each=4), height=sample(100:150, 12))
df
df[c(3,5), height]
df[c(3,5), 2]
df[c(3,5), 2] <- NA
df
df[df$height > 115]
df[df$height > 115,]
df$new <- NA
df$new[df$height > 130]
df$new[df$height > 130] <- 1
df
df$new[df$height < 110] <- 0
df
df$n2
df$n2 <- apply(df, 1, function(x) { if(x$new = 0) -1 else 2 })
df$n2 <- apply(df, 1, function(x) { if(x$new == 0) -1 else 2 })
df$n2 <- mapply(c(df$new), function(x) { if(x == 0) -1 else 2 })
df$n2 <- mapply(function(x) { if(x == 0) -1 else 2 }, c(df$new))
df$n2 <- mapply(function(x) { if(x == 0) { -1 } else { 2 } }, c(df$new))
if(1 == 0) { df }
if(1 == 1) { df }
mapply(function(x) { if(x == 0) { -1 } else { 2 } }, c(df$new))
mapply(function(x) if(x == 0) { -1 } else { 2 } , c(df$new))
mapply(function(x) if(x == 0)  -1  else  2  , c(df$new))
mapply(function(x) x+1, c(df$new))
mapply(function(x) if(TRUE) x+1, c(df$new))
mapply(function(x) if(x > 1) x+1, c(df$new))
mapply(function(x) if(x > 1 == TRUE) x+1, c(df$new))
mapply(function(x) if(x > 1 == TRUE) x+1, c(df$new))
mapply(function(x) if((x > 1) == TRUE) x+1, c(df$new))
mapply(function(x) if TRUE x+1, c(df$new))
mapply(function(x) if TRUE then x+1, c(df$new))
mapply(function(x) if(TRUE) then x+1, c(df$new))
mapply(function(x) if(TRUE) x+1, c(df$new))
function z(x) {}
function z(x) { if(x > 1) 2 else -1}
function z(x) { if(x > 1) {2} else {-1}}
z <- function(x) { if(x > 1) 2 else -1}
z(3)
z(0)
mapply(z, c(df$new))
z(NA)
z <- function(x) { if(na.pass(x) > 1) 2 else -1}
z(NA)
z <- function(x) { if(na.omit(x) > 1) 2 else -1}
z(NA)
remove(list = ls())
getwd()
setwd("C:/Users/gs0027/Documents/JCPJ/Formación/Coursera/DS03/project/")
dataurl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
download.file(url = dataurl, destfile = "dataset.zip", method = "curl")
download.file(url = dataurl, destfile = "dataset.zip")
Sys.info()
Sys.info()["sysname"]
if(!file.exists("files")) { dir.create("files") }
dataurl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
if(Sys.info()["name"] == "windows") {
download.file(url = dataurl, destfile = "files/dataset.zip", mode = "wb")
} else {
download.file(url = dataurl, destfile = "files/dataset.zip", mode = "wb", method = "curl")
}
if(Sys.info()["sysname"] == "windows") {
download.file(url = dataurl, destfile = "files/dataset.zip", mode = "wb")
} else {
download.file(url = dataurl, destfile = "files/dataset.zip", mode = "wb", method = "curl")
}
Sys.info()["sysname"]
if(Sys.info()["sysname"] == "windows") { 2 }
if(Sys.info()["sysname"] == "windows") { 2 }
Sys.info()["sysname"]
typeof(Sys.info()["sysname"])
Sys.info()["sysname"] == "s"
Sys.info()["sysname"] == "windows"
Sys.info()["sysname"] == "Windows"
if(Sys.info()["sysname"] == "Windows") {
download.file(url = dataurl, destfile = "files/dataset.zip", mode = "wb")
} else {
download.file(url = dataurl, destfile = "files/dataset.zip", mode = "wb", method = "curl")
}
unzip("files/dataset.zip", list=TRUE)
